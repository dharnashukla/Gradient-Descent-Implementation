# -*- coding: utf-8 -*-
"""Question-1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IcqmwBj0IuOZzv38soUmUaHWKsvIc7kN
"""

import numpy as np
import numpy.random 
import random
import math
import matplotlib.pyplot as plt
from random import seed
from random import random

#generating A, B , X

k = 7 # Number of columns
m = 23 # number of rows
X =[] # random numbers

## Generating A
A = np.zeros((k, k))
for i in range(k):
    A[i] = np.arange(k)
    np.random.shuffle(A[i])
    
## Generating B

B = np.zeros((k,k))
for j in range(k):
  B[j]=np.arange(k)
  np.random.shuffle(B[j])
  

## Generating X 

x = np.zeros(k)
for l in range(k):
    x[l] = np.random.randint(1,10)
    
#%%      

# def of sigmoid function 

def sigmoid(s):
    return 1 / (1 + np.exp(-s))

def sigmoidPrime(s):
    #derivative of sigmoid
    return s * (1 - s)

#%%
y = np.dot(A, x)
u = sigmoid(y)
v = np.dot(B,x)
z = np.dot(A,(np.multiply(u,v)))
w = np.dot(A,z)
L = np.square(w)

#%%

# Loss function

w1 = np.square(A)
w2 = sigmoid(np.dot(A,x))
w3 = np.dot(B,x)
w4 = np.dot(w2,w3)
w = np.dot(w1,w4) 
L = np.square(w) # cost function


#%%
def output(weight,x):
  out = np.dot(weight,x)
  output= sigmoid(out)
  return output

#%%
lr = 0.01
num_iter = 1000
m = len(w)
cost=[]
error_hist=[]
weight = np.dot(A,B)

#%%
for i in range(num_iter):
    out_put = output(weight,x)
    error = out_put-w
    # updating cost function
    w_1 = -1/m*lr*(np.dot(x,error))
    weight= w_1-weight
    L = L-L*lr
    cost.append(L)

